{"ast":null,"code":"var _jsxFileName = \"C:\\\\IH3\\\\SK\\\\react-node\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\n// 必要なReactフックとGoogle Maps APIコンポーネントをインポート\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\n// Google Maps APIキーを定義（実際の使用時は環境変数などで安全に管理することをお勧めします）\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'AIzaSyDLExH6OAGCBZLZspYmQquis5AFpPJ63TQ';\n\n// マップのコンテナスタイルを定義（幅100%、高さ500px）\nconst mapContainerStyle = {\n  width: '100%',\n  height: '500px'\n};\n\n// デフォルトの中心座標を設定\nconst defaultCenter = {\n  lat: -3.745,\n  lng: -38.523\n};\n\n// MapComponentの定義を開始\nconst MapComponent = () => {\n  _s();\n  // 現在位置の状態を管理するためのuseState\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  // マーカーの配列を管理するためのuseState\n  const [markers, setMarkers] = useState([]);\n\n  // コンポーネントがマウントされたときに実行されるuseEffect\n  useEffect(() => {\n    // ブラウザのジオロケーションAPIを使用して現在位置を取得\n    navigator.geolocation.getCurrentPosition(position => {\n      // 位置情報の取得に成功した場合、現在位置を更新\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setCurrentPosition({\n        lat: latitude,\n        lng: longitude\n      });\n    }, () => {\n      // 位置情報の取得に失敗した場合、エラーをコンソールに出力\n      console.error(\"現在位置の取得に失敗\");\n    });\n  }, []); // 空の依存配列で、このエフェクトは初回レンダリング時のみ実行される\n\n  // マップがクリックされたときのハンドラ関数\n  const handleMapClick = event => {\n    // クリックされた位置に新しいマーカーを作成\n    const newMarker = {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng()\n    };\n    // 新しいマーカーを既存のマーカー配列に追加\n    setMarkers(prevMarkers => [...prevMarkers, newMarker]);\n    // 新しいマーカーの位置をコンソールに出力\n    console.log(\"マーカー追加:\", newMarker);\n  };\n\n  // コンポーネントのレンダリング\n  return (\n    /*#__PURE__*/\n    // Google Maps APIをロードするためのLoadScriptコンポーネント\n    _jsxDEV(LoadScript, {\n      googleMapsApiKey: API_KEY,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: currentPosition,\n        zoom: 15,\n        onClick: handleMapClick,\n        children: [/*#__PURE__*/_jsxDEV(Marker, {\n          position: currentPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: marker\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// MapComponentをエクスポート\n_s(MapComponent, \"QJi8eK8nIbx3KkqwhEaP5134AmU=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","API_KEY","mapContainerStyle","width","height","defaultCenter","lat","lng","MapComponent","_s","currentPosition","setCurrentPosition","markers","setMarkers","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","console","error","handleMapClick","event","newMarker","latLng","prevMarkers","log","googleMapsApiKey","children","center","zoom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","marker","index","_c","$RefreshReg$"],"sources":["C:/IH3/SK/react-node/frontend/src/MapComponent.js"],"sourcesContent":["// 必要なReactフックとGoogle Maps APIコンポーネントをインポート\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\n// Google Maps APIキーを定義（実際の使用時は環境変数などで安全に管理することをお勧めします）\nconst API_KEY = 'AIzaSyDLExH6OAGCBZLZspYmQquis5AFpPJ63TQ';\n\n// マップのコンテナスタイルを定義（幅100%、高さ500px）\nconst mapContainerStyle = {\n  width: '100%',\n  height: '500px'\n};\n\n// デフォルトの中心座標を設定\nconst defaultCenter = {\n  lat: -3.745,\n  lng: -38.523\n};\n\n// MapComponentの定義を開始\nconst MapComponent = () => {\n  // 現在位置の状態を管理するためのuseState\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n  // マーカーの配列を管理するためのuseState\n  const [markers, setMarkers] = useState([]);\n\n  // コンポーネントがマウントされたときに実行されるuseEffect\n  useEffect(() => {\n    // ブラウザのジオロケーションAPIを使用して現在位置を取得\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        // 位置情報の取得に成功した場合、現在位置を更新\n        const { latitude, longitude } = position.coords;\n        setCurrentPosition({ lat: latitude, lng: longitude });\n      },\n      () => {\n        // 位置情報の取得に失敗した場合、エラーをコンソールに出力\n        console.error(\"現在位置の取得に失敗\");\n      }\n    );\n  }, []); // 空の依存配列で、このエフェクトは初回レンダリング時のみ実行される\n\n  // マップがクリックされたときのハンドラ関数\n  const handleMapClick = (event) => {\n    // クリックされた位置に新しいマーカーを作成\n    const newMarker = {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng()\n    };\n    // 新しいマーカーを既存のマーカー配列に追加\n    setMarkers((prevMarkers) => [...prevMarkers, newMarker]);\n    // 新しいマーカーの位置をコンソールに出力\n    console.log(\"マーカー追加:\", newMarker);\n  };\n\n  // コンポーネントのレンダリング\n  return (\n    // Google Maps APIをロードするためのLoadScriptコンポーネント\n    <LoadScript googleMapsApiKey={API_KEY}>\n      {/* GoogleMapコンポーネントを描画 */}\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        center={currentPosition}\n        zoom={15}\n        onClick={handleMapClick}\n      >\n        {/* 現在位置にマーカーを配置 */}\n        <Marker position={currentPosition} />\n        {/* クリックで追加されたマーカーを全て表示 */}\n        {markers.map((marker, index) => (\n          <Marker key={index} position={marker} />\n        ))}\n      </GoogleMap>\n    </LoadScript>\n  );\n}\n\n// MapComponentをエクスポート\nexport default MapComponent;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,wBAAwB;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,yCAAyC;;AAEzD;AACA,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,CAAC,KAAK;EACXC,GAAG,EAAE,CAAC;AACR,CAAC;;AAED;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAACW,aAAa,CAAC;EACrE;EACA,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd;IACAmB,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;MACZ;MACA,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;MAC/CT,kBAAkB,CAAC;QAAEL,GAAG,EAAEY,QAAQ;QAAEX,GAAG,EAAEY;MAAU,CAAC,CAAC;IACvD,CAAC,EACD,MAAM;MACJ;MACAE,OAAO,CAACC,KAAK,CAAC,YAAY,CAAC;IAC7B,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMC,cAAc,GAAIC,KAAK,IAAK;IAChC;IACA,MAAMC,SAAS,GAAG;MAChBnB,GAAG,EAAEkB,KAAK,CAACE,MAAM,CAACpB,GAAG,CAAC,CAAC;MACvBC,GAAG,EAAEiB,KAAK,CAACE,MAAM,CAACnB,GAAG,CAAC;IACxB,CAAC;IACD;IACAM,UAAU,CAAEc,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEF,SAAS,CAAC,CAAC;IACxD;IACAJ,OAAO,CAACO,GAAG,CAAC,SAAS,EAAEH,SAAS,CAAC;EACnC,CAAC;;EAED;EACA;IAAA;IACE;IACAzB,OAAA,CAACH,UAAU;MAACgC,gBAAgB,EAAE5B,OAAQ;MAAA6B,QAAA,eAEpC9B,OAAA,CAACJ,SAAS;QACRM,iBAAiB,EAAEA,iBAAkB;QACrC6B,MAAM,EAAErB,eAAgB;QACxBsB,IAAI,EAAE,EAAG;QACTC,OAAO,EAAEV,cAAe;QAAAO,QAAA,gBAGxB9B,OAAA,CAACF,MAAM;UAACmB,QAAQ,EAAEP;QAAgB;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAEpCzB,OAAO,CAAC0B,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzBxC,OAAA,CAACF,MAAM;UAAamB,QAAQ,EAAEsB;QAAO,GAAxBC,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAqB,CACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;AAEjB,CAAC;;AAED;AAAA5B,EAAA,CAzDMD,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AA0DlB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}